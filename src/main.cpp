#include "maze_solver.h"
#include <iostream>
#include <vector>
#include <string>

int main() {
    // Example maze
    // S = Start
    // E = End
    // # = Wall
    // . = Open path

    // Huge maze
    // std::vector<std::string> maze = {
    //     "#############################################################################",
    //     "S...#.......#.......#.......#.............#.......#...#.......#.............#",
    //     "###.#.#####.#.#####.#.#####.#.###########.#.#####.#.#.#.###.#.#############.#",
    //     "#...#.#...#...#...#...#...#...#...#.....#...#.....#.#.#...#.#.............#.#",
    //     "#.###.#.#.#####.#.#####.#.#####.#.#.###.#####.#####.#.###.#.#############.#.#",
    //     "#.#...#.#.#...#.#.#...#.#.#...#.#.#...#.#...#.#...#.#...#.#.#...#.......#...#",
    //     "#.#.###.#.#.#.#.#.#.#.#.#.#.#.#.#.###.#.#.#.#.#.#.#.###.#.#.#.#.#.#####.###.#",
    //     "#.#.#...#.#.#.#.#...#...#...#...#...#.#.#.#.#...#.#...#.#.#...#...#...#...#.#",
    //     "#.#.#.###.#.#.#.#############.#####.#.#.#.#.##.##.###.#.#.#########.#.###.#.#",
    //     "#...#...#...#...#.......#...#.#...#.#.#...#.#...#.#...#...#.........#...#...#",
    //     "#######.#########.#####.#.#.#.#.#.#.#.#####.#.#.#.#.#######.###########.###.#",
    //     "#.......#.........#...#...#...#.#...#.....#...#...#.#.......#...........#...#",
    //     "#.#######.#########.#.#########.#########.#######.#.#.#######.###########.###",
    //     "#.#.......#...#...#.#...#.....#.#.........#.......#...#.....#.#...........#.#",
    //     "#.#.#######.#.#.#.#.###.#.###.#.#.#########.#####.#####.###.#.#.###########.#",
    //     "#...#.......#...#...#...#...#...#...#...#...#...#...#...#.#...#.............#",
    //     "#####.###########.###.#####.#######.#.#.#.###.#.###.#.###.###################",
    //     "#...#.#.........#...#.#...#.#.......#.#.#...#.#...#.#.#...#...#...#...#.....#",
    //     "#.#.#.#.#######.###.#.#.#.#.#.#######.#.###.#.###.#.#.#.###.#.#.#.#.#.#.###.#",
    //     "#.#...#.#.....#...#.#...#.#.#.......#.#...#.#...#.#.#.#...#.#...#...#...#...#",
    //     "#.#####.#.###.###.#.#####.#.#######.#.###.#.###.#.#.#.###.#.#############.###",
    //     "#.#...#...#.#...#.#.#...#.#.#.....#.#...#.#.#...#.#.#...#.#.#.............#.#",
    //     "#.#.#.#####.###.#.#.#.#.#.#.#.###.#.###.#.#.#.###.#.###.#.#.#.#############.#",
    //     "#...#...#...#...#.#...#...#...#...#.....#...#...#.#...#...#...............#.#",
    //     "#######.#.###.###.###########.#.#####.#########.###.#.#######################",
    //     "#.....#.#...#...#.#.........#.#.....#.#.....#...#...#...#...................#",
    //     "#.###.#.###.###.#.#.#######.#.#####.#.#.###.#.###.#####.#.###################",
    //     "#...#...#...#...#...#.....#.#.....#...#...#...#...#.....#...................#",
    //     "###.#####.###.#######.###.###.###.#######.#####.###.#####################.###",
    //     "#...#...#...#.......#...#...#...#.#.....#.....#...#.#.............#...#...#.#",
    //     "#.###.#.###.#######.###.###.###.#.#.###.#####.###.#.#.###.#.#####.#.#.#.###.#",
    //     "#.#...#...#.....#...#...#...#...#...#.#...#...#...#...#...#.....#...#...#...#",
    //     "#.#.#####.#####.#.###.###.###.#####.#.###.#.###.#######.#######.#########.#.#",
    //     "#...#...#.....#.#...#...#...#.....#.#...#.#...#.......#.......#...........#.#",
    //     "#####.#.#####.#.###.###.###.#####.#.###.#.###.#######.#######.#############.#",
    //     "#...#.#...#...#...#.#...#...#...#.#...#.#...#.#.....#.......#.#.............#",
    //     "#.#.#.###.#.#####.#.#.###.###.#.#.###.#.###.#.#.###.#######.#.#.#############",
    //     "#.#...#...#.....#...#...#...#.#.#...#.#...#.#...#.#.#.....#...#.#.......#...#",
    //     "#.#####.#######.#######.###.#.#.###.#.###.#.#####.#.#.###.#####.#.#####.#.#.#",
    //     "#.....#.......#.......#...#...#...#...#...#.....#...#...#.......#.....#...#.#",
    //     "#####.#######.#######.###.#######.#####.#######.#####.#.###############.###.#",
    //     "#...#...#...#.......#...#.#.....#.....#.#.....#.....#.#...............#...#.#",
    //     "#.#.###.#.#.#######.###.#.#.###.#####.#.#.###.#####.#.###############.###.#.#",
    //     "#.#...#...#.....#...#...#...#.#.....#...#...#.....#.#.....#...#.....#...#.#.#",
    //     "#.###.#########.#.###.#######.#####.#######.#####.#.#####.#.#.#.###.###.#.#.#",
    //     "#...#.........#...#...#.....#.....#.......#.....#.#.#...#...#...#.#.#...#...#",
    //     "###.#########.#####.###.###.#####.#######.#####.#.#.#.#.#########.#.#.#####.#",
    //     "#...#.....#...#...#...#...#.....#.#.....#...#...#...#.#...........#...#...#.#",
    //     "#.###.###.#.###.#.###.###.#####.#.#.###.###.#.#######.#############.###.#.#.#",
    //     "#.#...#.#...#...#...#.#...#...#...#...#...#.#.....#...#...........#...#.#...#",
    //     "#.#.###.#####.#####.#.#.###.#.#######.###.#.#####.#.###.#########.###.#.#####",
    //     "#...#...#...#.....#...#...#.#.#.....#...#.#.#...#...#...#.......#...#.#.....#",
    //     "#####.#.#.#.#####.#######.#.#.#.###.###.#.#.#.#.#####.###.#####.###.#.#####.#",
    //     "#...#.#...#.....#.......#...#...#.#...#.#.#...#.....#...#.#...#...#.........#",
    //     "#.#.#.#########.#######.#########.###.#.#.#########.###.#.#.#.###.#.#########",
    //     "#.#...#.......#.#.....#...........#...#...#.......#...#...#.#...#.#.........#",
    //     "#.#####.#####.#.#.###.#############.#######.#####.###.#####.###.#.#########.#",
    //     "#.......#...#...#...#.#...........#.......#.#...#...#.....#...#.#...#...#...#",
    //     "#########.#.#######.#.#.#########.#######.#.#.#.###.#####.###.#.###.#.#.#.###",
    //     "#.........#.......#...#.#.......#.......#.#...#...#.....#...#.#...#...#...#.#",
    //     "#.###############.#####.#.#####.#######.#.#######.#####.###.#.###.#######.#.#",
    //     "#.....#.........#...#...#.#...#.......#...#.....#.#...#...#...#...#.........#",
    //     "#####.#.#######.###.#.###.#.#.#######.#####.###.#.#.#.###.#####.###.###.#####",
    //     "#.....#.#.....#...#...#.#...#.#.....#.#...#...#...#.#.........#...#...#.....#",
    //     "#.#####.#.###.###.#####.#####.#.###.#.#.#.###.#####.###.#####.###.###.#####.#",
    //     "#.#...#.#...#...#.....#...#...#...#...#.#...#.........#.....#...#.........#.#",
    //     "#.#.#.#.###.###.#####.###.#.#####.#####.###.#####.###.#####.###.###.#####.#.#",
    //     "#...#...#.#...#.......#...#.#...#.....#...#.#...#...#.....#...#...#.#...#.#.#",
    //     "#######.#.###.#########.###.#.#.#####.###.#.#.#.###.#####.###.###.#.#.#.#.#.#",
    //     "#.......#...#...........#...#.#.....#...#.#...#...#.....#...#...#...#.#...#.#",
    //     "#.#########.#############.###.#####.###.#.#######.#####.###.###.#####.#####.#",
    //     "#...#.....#...........#...#.#.#...#...#.#.#.....#.#...#...#...#.....#.#...#.#",
    //     "###.#.###.###########.#.###.#.#.#.###.#.#.#.###.#.#.#.###.###.#####.#.#.#.#.#",
    //     "#...#...#.............#...#...#.#.#...#.#...#...#...#...#...#.......#...#...#",
    //     "#.#####.#################.###.#.#.#.###.#####.#########.###.###############.#",
    //     "#.....#...................#...#...#...#.....#.........#...#...#.............#",
    //     "#####.###################.#.#########.#####.#########.###.###.#.#############",
    //     "#...#.#...................#.#.......#.#...#.........#...#...#.#.........#...#",
    //     "#.#.#.#.###################.#.#####.#.#.#.#########.###.###.#.#########.#.#.#",
    //     "#.#...#.#...#...............#.#...#...#.#.#.......#...#...#.#...#.....#...#.#",
    //     "#.#####.#.#.#.###############.#.#.#####.#.#.#####.###.###.#.###.#.###.#####.#",
    //     "#.......#.#...#...............#.#.....#.#.#.#...#...#.#...#...#...#.........#",
    //     "#########.#####.###############.#####.#.#.#.#.#.###.#.#.#####.#####.#########",
    //     "#...#...#.#...#...#.............#...#...#.#...#...#...#.....#...#...........#",
    //     "#.#.#.#.#.#.#.###.#.#############.#.#####.#######.#########.###.#.###########",
    //     "#.#...#...#.#...#...#...........#.#.....#.......#...#.....#...#.#...........#",
    //     "#.#########.###.#####.#########.#.#####.#######.#.#.#.###.###.#.###########.#",
    //     "#...........#...#...#.#.......#...#...#.#.....#...#...#.#...#...#...........#",
    //     "#############.###.#.#.#.#####.#####.#.#.#.###.###.#####.###.#.#.#.###########",
    //     "#.............#...#...#.#...#.......#...#...#...#.....#...#...#.#...........#",
    //     "#.#############.#######.#.#.#############.#####.#####.###.#####.###########.#",
    //     "#...........#...#.......#.#...........#...#...#.....#...#.#...#.............#",
    //     "###########.#.###.#######.###########.#.###.#.#####.###.#.#.#.###############",
    //     "#...#.....#...#...#.....#.........#...#...#.#.....#.#...#...#...............#",
    //     "#.#.#.###.#####.###.###.#########.#.#####.#.#####.#.#.#############.#####.#.#",
    //     "#.#...#.#...#...#...#.#...#.....#...#...#.#.#...#...#.#...#.......#.....#.#.#",
    //     "#.#####.###.#.###.###.###.#.###.#####.#.#.#.#.#.#####.#.#.#.#####.#.###.#.#.#",
    //     "#.......#...#...#...#...#...#.#.#...#.#...#...#.....#...#.......#...#...#.#.E",
    //     "#############################################################################"
    // };
    
    //medium maze
    // std::vector<std::string> maze = {
    //     "####################",
    //     "#...#..............#",
    //     "###.#.############.#",
    //     "#...#.#..........#.#",
    //     "#.###.#.##########.#",
    //     "#.#...#.#........#.#",
    //     "#.#.###.#.######.#.#",
    //     "S...#...#.#....#.#.#",
    //     "###.#.###.#.##.#.#.#",
    //     "#...#.....#.#..#.#.#",
    //     "#.#######.#.#.##.#.#",
    //     "#.#.......#.#....#.#",
    //     "#.#.###.###.######.E",
    //     "#...#.....#......#.#",
    //     "#####.###.######.#.#",
    //     "#.....#...#....#.#.#",
    //     "#.#####.###.#.##.#.#",
    //     "#....#...#..#......#",
    //     "#.####.###.#######.#",
    //     "####################"
    // };

    //small maze with equal distance solutions and escape points
    std::vector<std::string> maze = {
        "#########.##########",
        "#..................#",
        "#.#######.########.#",
        "S.#..............#.E",
        "#.#######.########.#",
        "#..................#",
        "#########.##########"
    };

    // Create a solver
    maze_solver solver(maze);
    
    // Solve the maze
    auto path = solver.solve();
    
    // Print the ASCII solution
    solver.printSolution(path);

    double scale = 0.5; // edit to see scale and coord impact
    std::pair<double, double>  world = {0.6, -0.7};

    solver.scaleSet(scale);
    solver.worldSet(world);
    
    // Generate and print waypoints
    auto waypoints = solver.generateWaypoints(path);
    solver.printWaypoints(waypoints);
    
    return 0;
}