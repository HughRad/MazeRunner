#include <ros/ros.h>
#include <moveit/move_group_interface/move_group_interface.h>
#include <geometry_msgs/Pose.h>
#include <vector>
#include <actionlib/client/simple_action_client.h>
#include <sensor_msgs/JointState.h>
#include "maze_solver.h"

class DrawingRobot {
private:
    ros::NodeHandle nh_;
    moveit::planning_interface::MoveGroupInterface move_group_;
    ros::Subscriber joint_state_sub_;
    sensor_msgs::JointState latest_joint_state_;
    bool joint_state_received_;

public:
    // Constructor
    DrawingRobot(const std::string& planning_group = "manipulator") 
        : move_group_(planning_group), joint_state_received_(false) {
        
        // Configure move group settings
        move_group_.setMaxVelocityScalingFactor(0.2);
        move_group_.setMaxAccelerationScalingFactor(0.2);
        move_group_.setPlanningTime(5.0);
        move_group_.setGoalJointTolerance(0.05);
        move_group_.setGoalPositionTolerance(0.01);
        move_group_.setGoalOrientationTolerance(0.05);
                
        // Setup joint state subscriber
        joint_state_sub_ = nh_.subscribe("/joint_states", 10, &DrawingRobot::jointStateCallback, this);
        
        // Wait for first joint state
        ros::Time start_time = ros::Time::now();
        while (!joint_state_received_ && (ros::Time::now() - start_time).toSec() < 10.0) {
            ros::Duration(0.1).sleep();
            ros::spinOnce();
        }
    }

    // Joint state callback
    void jointStateCallback(const sensor_msgs::JointState::ConstPtr& msg) {
        latest_joint_state_ = *msg;
        joint_state_received_ = true;
    }

    // Wait for controller to synchronize
    bool waitForControllerSync(double timeout = 2.0) {
        ros::Duration(timeout).sleep();
        ros::spinOnce();
        return true;
    }

    // Get current joint positions
    std::vector<double> getCurrentJointPositions() {
        return move_group_.getCurrentJointValues();
    }

    // Initialize robot to a specific joint configuration
    bool initializeToPosition(const std::vector<double>& target_joint_positions) {
        move_group_.setStartStateToCurrentState();
        move_group_.setJointValueTarget(target_joint_positions);
        
        moveit::planning_interface::MoveGroupInterface::Plan my_plan;
        bool success = (move_group_.plan(my_plan) == moveit::planning_interface::MoveItErrorCode::SUCCESS);
    
        if (success) {
            move_group_.execute(my_plan);
            waitForControllerSync();
            return true;
        }
        return false;
    }

    // Get current pose
    geometry_msgs::Pose getCurrentPose() {
        return move_group_.getCurrentPose().pose;
    }
    
    
    // Create a pose from x,y,z coordinates
    geometry_msgs::Pose makePose(double x, double y, double z) {
        geometry_msgs::Pose pose;
        pose.position.x = x;
        pose.position.y = y;
        pose.position.z = z;
        
        // Set orientation - pen pointing down
        pose.orientation.x = 0.0;
        pose.orientation.y = 1.0;
        pose.orientation.z = 0.0;
        pose.orientation.w = 0.0;
        
        return pose;
    }
    
    // Move to a specific pose
    bool moveToPose(const geometry_msgs::Pose& target_pose) {
        move_group_.setStartStateToCurrentState();
        move_group_.setPoseTarget(target_pose);
        
        moveit::planning_interface::MoveGroupInterface::Plan plan;
        bool success = (move_group_.plan(plan) == moveit::planning_interface::MoveItErrorCode::SUCCESS);
        
        if (success) {
            move_group_.execute(plan);
            waitForControllerSync();
            return true;
        }
        return false;
    }

    // Execute Cartesian path through waypoints
    bool executeCartesianPath(const std::vector<geometry_msgs::Pose>& waypoints) {
        if (waypoints.empty()) {
            return false;
        }

        // Prepare waypoints for Cartesian path (skip first point)
        std::vector<geometry_msgs::Pose> cartesian_waypoints(waypoints.begin() + 1, waypoints.end());
        
        if (cartesian_waypoints.empty()) {
            return true;
        }
        
        // Execute the Cartesian path
        moveit_msgs::RobotTrajectory trajectory;
        double fraction = move_group_.computeCartesianPath(
            cartesian_waypoints, 0.01, 0.0, trajectory);
        
        if (fraction > 0.5) {
            move_group_.execute(trajectory);
            waitForControllerSync();
            return true;
        }
        return false;
    }
};

int main(int argc, char** argv)
{
    ros::init(argc, argv, "ur3_cartesian_waypoints");
    ros::AsyncSpinner spinner(2);
    spinner.start();
    
    DrawingRobot robot;
    ros::Duration(5.0).sleep();
    
    // Initialize robot position
    std::vector<double> initial_joint_positions = {0.0, -0.894, 2.392, -3.077, -1.576, 0.0};
    robot.initializeToPosition(initial_joint_positions);
    
    // Define maze
    std::vector<std::string> maze = {
        "####################",
        "#...#..............#",
        "###.#.############.#",
        "#...#.#..........#.#",
        "#.###.#.##########.#",
        "#.#...#.#........#.#",
        "#.#.###.#.######.#.#",
        "S...#...#.#....#.#.#",
        "###.#.###.#.##.#.#.#",
        "#...#.....#.#..#.#.#",
        "#.#######.#.#.##.#.#",
        "#.#.......#.#....#.#",
        "#.#.###.###.######.E",
        "#...#.....#......#.#",
        "#####.###.######.#.#",
        "#.....#...#....#.#.#",
        "#.#####.###.#.##.#.#",
        "#....#...#..#......#",
        "#.####.###.#######.#",
        "####################"
    };

     // Create a maze_solver object with the maze string as an input
     maze_solver solver(maze);

     //set waypoint parameters
     double scale = 0.01; //set as distance between maze grid points (manualy measured)
     std::pair<double, double>  world = {0.15, 0.15}; //set as the world coords of the mazes left top most point (should be given by nick)
     double rotation = 0; // Rotation of maze in degrees - clockwise rotation (should be given by nick)
     double depth = 0; // set as the drawing depth (should be given by nick)
 
     solver.scaleSet(scale);
     solver.worldSet(world);
     solver.rotationSet(rotation);
     solver.depthSet(depth);
     
     //solve the maze and output the required robot waypoints in order of execution
     std::vector<geometry_msgs::Pose> robotWaypoints = solver.pathPlaner();
    // Execute the path
    robot.executeCartesianPath(robotWaypoints);
    
    // Return to initial position
    robot.initializeToPosition(initial_joint_positions);
    
    ros::shutdown();
    return 0;
}